{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GitExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA0BeA,EAvBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACE,uBAAMC,SARa,SAACC,GACpBA,EAAEC,kBACY,OAAVJ,QAAU,IAAVA,OAAA,EAAAA,EAAYK,OAAOC,QAAS,IAC9BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA0BO,OACxCN,EAAc,MAIhB,UACE,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACP,mCACNC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACP,oCADO,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAACL,GAE1B,OACE,sBAAKM,UAAU,oCAAf,UACE,qBAAKC,IAAKP,EAAIR,IAAKgB,IAAKR,EAAIE,QAC5B,4BAAIF,EAAIE,YCHDO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACd,GACpBe,YAAW,WACPH,EAAS,CACLf,KAAMG,EACNU,SAAS,MAEf,UAGL,CAACpB,IACGqB,EDdmBK,CAAa1B,GAA/BO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QACd,OACE,qCACE,oBAAIJ,UAAU,mCAAd,SAAkDhB,IACjDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,uBAECT,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,WEafgB,EAtBM,SAACC,GACpB,MAAoC1C,mBAAS,CAAC,SAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,gDACG,cAAC,EAAD,CAAaA,cAAeA,IAC/B,uBAEA,6BAEE4C,EAAWpB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAAyBA,SAAUA,GAArBA,Y,MCVxB8B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.c5e63b69.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputvalue, setInputValue] = useState('');\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputvalue?.trim().length > 2) {\n      setCategories((cats) => [ inputvalue,...cats]);\n      setInputValue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>{inputvalue}</h2>\n      <input type=\"text\" value={inputvalue} onChange={handleInputChange} />\n    </form>\n  );\n};\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n    const key = \"exzcJqbaZqNu0qkkv4dR9uFrOXEEayrr\";\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${key}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n    return gifs;\n  };","import React from \"react\";\n\nexport const GifGridItem = (img) => {\n  \n  return (\n    <div className=\"animate__animated animate__fadeIn\">\n      <img src={img.url} alt={img.title} />\n      <p>{img.title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h2 className=\"animate__animated animate__flash\">{category}</h2>\n      {loading && <p className=\"animate__animated animate__pulse\">Loading</p>}\n\n      <hr></hr>\n\n      {data.map((img) => (\n        <GifGridItem key={img.id} {...img} />\n      ))}\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n  useEffect(() => {\n    getGifs(category).then((img) => {\n        setTimeout(() => {\n            setState({\n                data: img,\n                loading: false\n            });\n        },3000);\n    \n    });\n  }, [category]);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./AddCategory\";\nimport {GifGrid} from './GifGrid';\n\n\nconst GitExpertApp = (props) => {\n  const [categories, setCategories] = useState(['goku']);\n\n  return (\n    <>\n      <h2>Git Expert App</h2>\n         <AddCategory setCategories={setCategories} ></AddCategory>\n      <hr />\n      \n      <ol>\n        {\n        categories.map((category) => (\n          <GifGrid key={category}  category={category} />\n        ))\n        }\n      </ol>\n    </>\n  );\n};\n\n\n\nexport default GitExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitExpertApp from './components/GitExpertApp'\nimport \"./index.css\";\n\n\n\nReactDOM.render(\n  <GitExpertApp />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}